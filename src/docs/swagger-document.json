{
  "openapi": "3.0.3",
  "info": {
    "title": "Movie Wishlist API",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:3000/v1"
    }
  ],
  "tags": [
    {
      "name": "users"
    },
    {
      "name": "tmdb"
    },
    {
      "name": "movies"
    },
    {
      "name": "logs"
    }
  ],
  "paths": {
    "/users": {
      "post": {
        "tags": ["users"],
        "summary": "Create user",
        "description": "Creates a user and return it's token",
        "operationId": "createUser",
        "requestBody": {
          "description": "Create user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUser"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 409
                    },
                    "message": {
                      "type": "string",
                      "example": "User with email abc@def.com already exists."
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 422
                    },
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "Field email must be a valid email.",
                        "Field email must exist.",
                        "Field email must not be empty.",
                        "Field password must exist.",
                        "Field password must have at least 8 characters and contain at least 1 lowercase, uppercase, number and symbol."
                      ]
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["users"],
        "summary": "Update user",
        "description": "Updates the user from authorization token and return it's token",
        "operationId": "updateUser",
        "requestBody": {
          "description": "Update user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUser"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unathorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 422
                    },
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "Field password must have at least 8 characters and contain at least 1 lowercase, uppercase, number and symbol."
                      ]
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "delete": {
        "tags": ["users"],
        "summary": "Delete user",
        "description": "Deletes the user from authorization token",
        "operationId": "deleteUser",
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "description": "Unathorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 422
                    },
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "Header Authorization must have it's token preceded by the keyword 'Basic'.",
                        "Header Authorization must not be empty."
                      ]
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/tmdb/{title}": {
      "get": {
        "tags": ["tmdb"],
        "summary": "Find movies by title",
        "description": "Finds matching movies by title in The Movie Database",
        "operationId": "findTMDBMovies",
        "parameters": [
          {
            "in": "path",
            "name": "title",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Movie title"
            }
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "description": "Page to query",
              "minimum": 1,
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "perPageLimit": {
                          "example": 20
                        },
                        "data": {
                          "type": "array",
                          "description": "Paginated movie wishlist of current user",
                          "items": {
                            "$ref": "#/components/schemas/FindTMDBMovie"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unathorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 422
                    },
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "Query param page must be an integer greater than 0."
                      ]
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/movies": {
      "get": {
        "tags": ["movies"],
        "summary": "List movies",
        "description": "Paginated list of movies in the wishlist of current user",
        "operationId": "listMovies",
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": ["pending", "watched", "rated", "recommended"]
            },
            "description": "Filter results by status"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "description": "Page to query",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer",
              "description": "Maximum number of items per page",
              "minimum": 1,
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "type": "array",
                          "description": "Paginated movie wishlist of current user",
                          "items": {
                            "$ref": "#/components/schemas/FindMovie"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unathorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 422
                    },
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "Query param status must be pending, watched, rated or recommended.",
                        "Query param page must be an integer greater than 0.",
                        "Query param take must be an integer greater than 0."
                      ]
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "post": {
        "tags": ["movies"],
        "summary": "Create movie",
        "description": "Creates a movie in the wishlist of current user with The Movie Database info\n\n*To obtain a tmdbId, head over to `/tmdb/{title}` and search for a movie. With the results, grab the property `id` from the chosen movie and use it as `tmdbId` on this endpoint*\n",
        "operationId": "createMovie",
        "requestBody": {
          "description": "Update user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMovie"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MovieResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unathorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 409
                    },
                    "message": {
                      "type": "string",
                      "example": "Movie with tmdbId 123456 already exists."
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 422
                    },
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "Field tmdbId must be a string.",
                        "Field tmdbId must contain only numeric values.",
                        "Field tmdbId must exist."
                      ]
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/movies/{code}": {
      "get": {
        "tags": ["movies"],
        "summary": "Find movie by code",
        "description": "Finds a movie by it's code in the wishlist of current user",
        "operationId": "findMovie",
        "parameters": [
          {
            "in": "path",
            "name": "code",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Movie code (UUID)"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindMovie"
                }
              }
            }
          },
          "401": {
            "description": "Unathorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Movie with code d06b5c43-7b83-4bfa-ad84-fb930076d5e3 was not found."
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 422
                    },
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "Header Authorization must have it's token preceded by the keyword 'Basic'.",
                        "Header Authorization must not be empty."
                      ]
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "patch": {
        "tags": ["movies"],
        "summary": "Update movie by code",
        "description": "Updates a movie by it's code in the wishlist of current user",
        "operationId": "updateMovie",
        "parameters": [
          {
            "in": "path",
            "name": "code",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Movie code (UUID)"
            }
          }
        ],
        "requestBody": {
          "description": "Update user object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMovie"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MovieResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unathorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Movie with code d06b5c43-7b83-4bfa-ad84-fb930076d5e3 was not found."
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 422
                    },
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "Field status must be watched, rated, or recommended.",
                        "Field rating must be an integer ranging from 0 to 5.",
                        "Field rating must exist.",
                        "Field recommended must be a boolean.",
                        "Field recommended must exist."
                      ]
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      },
      "delete": {
        "tags": ["movies"],
        "summary": "Delete movie",
        "description": "Deletes a movie by it's code in the wishlist of current user",
        "operationId": "deleteMovie",
        "parameters": [
          {
            "in": "path",
            "name": "code",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Movie code (UUID)"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "description": "Unathorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Movie with code d06b5c43-7b83-4bfa-ad84-fb930076d5e3 was not found."
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 422
                    },
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "Header Authorization must have it's token preceded by the keyword 'Basic'.",
                        "Header Authorization must not be empty."
                      ]
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/logs/{source}": {
      "get": {
        "tags": ["logs"],
        "summary": "List all logs from source",
        "description": "Paginated list of logs from selected source",
        "operationId": "listAllLogs",
        "parameters": [
          {
            "in": "path",
            "name": "source",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["movies", "error"]
            },
            "description": "Log source"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "description": "Page to query",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer",
              "description": "Maximum number of items per page",
              "minimum": 1,
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "type": "array",
                          "description": "Paginated movie wishlist of current user",
                          "items": {
                            "$ref": "#/components/schemas/FindLog"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unathorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "no such index [source]"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 422
                    },
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "Query param page must be an integer greater than 0.",
                        "Query param take must be an integer greater than 0."
                      ]
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    },
    "/logs/{source}/history/{identifier}": {
      "get": {
        "tags": ["logs"],
        "summary": "List a log history from source",
        "description": "Paginated list of logs from selected source with specified identifier",
        "operationId": "listSourceLogHistory",
        "parameters": [
          {
            "in": "path",
            "name": "source",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["movies"]
            },
            "description": "Log source"
          },
          {
            "in": "path",
            "name": "identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Log identifier"
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "description": "Page to query",
              "minimum": 1,
              "default": 1
            }
          },
          {
            "in": "query",
            "name": "take",
            "schema": {
              "type": "integer",
              "description": "Maximum number of items per page",
              "minimum": 1,
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedResponse"
                    },
                    {
                      "properties": {
                        "data": {
                          "type": "array",
                          "description": "Paginated movie wishlist of current user",
                          "items": {
                            "$ref": "#/components/schemas/FindLog"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unathorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "no such index [source]"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable entity",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 422
                    },
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "Query param page must be an integer greater than 0.",
                        "Query param take must be an integer greater than 0."
                      ]
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TooManyRequestsError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        },
        "security": [
          {
            "Basic": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "UnauthorizedError": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "example": 401
          },
          "message": {
            "type": "string",
            "example": "Token not authorized."
          }
        }
      },
      "TooManyRequestsError": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "example": 429
          },
          "message": {
            "type": "string",
            "example": "Too many requests, try again later."
          }
        }
      },
      "InternalServerError": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "example": 500
          },
          "message": {
            "type": "string",
            "example": "Internal server error."
          }
        }
      },
      "PaginatedResponse": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "description": "Current page",
            "minimum": 1
          },
          "pageCount": {
            "type": "integer",
            "description": "Total number of pages",
            "minimum": 1
          },
          "perPageLimit": {
            "type": "integer",
            "description": "Maximum number of items in data array per page",
            "minimum": 1,
            "example": 10
          },
          "totalItems": {
            "type": "integer",
            "description": "Total items found with current query (not page bound)",
            "minimum": 0,
            "example": 1
          }
        }
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "example": "YWJjQGRlZi5jb206NXRyMG5nUDQkdzByZA=="
          }
        }
      },
      "CreateUser": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "New user email",
            "format": "email",
            "example": "abc@def.com"
          },
          "password": {
            "type": "string",
            "description": "New user password",
            "format": "password",
            "example": "5tr0ngP4$w0rd"
          }
        },
        "required": ["email", "password"]
      },
      "UpdateUser": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "description": "New user password",
            "format": "password",
            "example": "5tr0ngP4$w0rd"
          }
        }
      },
      "FindTMDBMovie": {
        "type": "object",
        "properties": {
          "adult": {
            "type": "boolean",
            "example": false
          },
          "backdrop_path": {
            "type": "string",
            "example": "/zOpe0eHsq0A2NvNyBbtT6sj53qV.jpg"
          },
          "genre_ids": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "example": [28, 878, 35, 10751]
          },
          "id": {
            "type": "integer",
            "example": 939243
          },
          "original_language": {
            "type": "string",
            "example": "en"
          },
          "original_title": {
            "type": "string",
            "example": "Sonic the Hedgehog 3"
          },
          "overview": {
            "type": "string",
            "example": "Sonic, Knuckles, and Tails reunite against a powerful new adversary, Shadow..."
          },
          "popularity": {
            "type": "number",
            "example": 5620.604
          },
          "poster_path": {
            "type": "string",
            "example": "/d8Ryb8AunYAuycVKDp5HpdWPKgC.jpg"
          },
          "release_date": {
            "type": "string",
            "example": "2024-12-19T00:00:00.000Z"
          },
          "title": {
            "type": "string",
            "example": "Sonic the Hedgehog 3"
          },
          "video": {
            "type": "boolean",
            "example": false
          },
          "vote_average": {
            "type": "number",
            "example": 7.8
          },
          "vote_count": {
            "type": "integer",
            "example": 1642
          }
        }
      },
      "MovieResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "YWJjQGRlZi5jb206NXRyMG5nUDQkdzByZA=="
          }
        }
      },
      "FindMovie": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Unique UUID code generated by the API",
            "format": "uuid",
            "example": "d06b5c43-7b83-4bfa-ad84-fb930076d5e3"
          },
          "externalCode": {
            "type": "string",
            "description": "Movie ID from The Movie Database",
            "example": 123456
          },
          "title": {
            "type": "string",
            "description": "Movie title date from The Movie Database",
            "example": "A Movie Title"
          },
          "releaseDate": {
            "type": "string",
            "description": "Movie release date from The Movie Database",
            "example": "2000-01-01T00:00:00.000Z",
            "format": "date"
          },
          "status": {
            "type": "string",
            "enum": ["pending", "watched", "rated", "recommended"],
            "description": "Movie status by current user",
            "example": "recommended"
          },
          "rating": {
            "type": "integer",
            "nullable": true,
            "minimum": 0,
            "maximum": 5,
            "description": "Movie rating by current user",
            "example": 4
          },
          "recommended": {
            "type": "boolean",
            "nullable": true,
            "description": "Flag if movie has been recommended or not by current user",
            "example": true
          },
          "synopsis": {
            "type": "string",
            "description": "Movie title synopsis from The Movie Database",
            "example": "This movie is about..."
          },
          "genres": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Movie title genres from The Movie Database",
            "example": ["Comedy", "Animation"]
          }
        }
      },
      "CreateMovie": {
        "properties": {
          "tmdbId": {
            "type": "string",
            "description": "Movie ID from The Movie Database",
            "format": "uuid",
            "example": 123456
          }
        },
        "required": ["tmdbId"]
      },
      "UpdateMovie": {
        "properties": {
          "status": {
            "type": "string",
            "enum": ["watched", "rated", "recommended"],
            "description": "Movie status by current user",
            "example": "recommended"
          },
          "rating": {
            "type": "integer",
            "minimum": 0,
            "maximum": 5,
            "description": "- Movie rating by current user\n- `required` if field status exist and has a value of 'rated'\n",
            "example": 4
          },
          "recommended": {
            "type": "boolean",
            "description": "- Flag if movie has been recommended or not by current user\n- `required` if field status exist and has a value of 'recommended'\n",
            "example": true
          }
        }
      },
      "FindLog": {
        "properties": {
          "identifier": {
            "type": "string",
            "description": "Unique UUID code generated by the API",
            "format": "uuid",
            "example": "d06b5c43-7b83-4bfa-ad84-fb930076d5e3"
          },
          "path": {
            "type": "string",
            "description": "Request path",
            "format": "url",
            "example": "/v1/movies/d06b5c43-7b83-4bfa-ad84-fb930076d5e3"
          },
          "method": {
            "type": "string",
            "description": "Request method",
            "enum": [
              "GET",
              "HEAD",
              "OPTIONS",
              "TRACE",
              "PUT",
              "DELETE",
              "POST",
              "PATCH",
              "CONNECT"
            ],
            "example": "PATCH"
          },
          "requestBody": {
            "description": "Request body sent by the user",
            "type": "object",
            "example": {}
          },
          "status": {
            "type": "integer",
            "description": "Response status code",
            "example": 200
          },
          "responseBody": {
            "description": "Response body received by the user",
            "type": "object",
            "example": {
              "code": "d06b5c43-7b83-4bfa-ad84-fb930076d5e3"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "Basic": {
        "type": "http",
        "scheme": "basic"
      }
    }
  }
}
