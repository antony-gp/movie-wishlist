# docker compose --env-file "../.env" up -d

services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTICSEARCH_VERSION}
    ports:
      - "${ELASTICSEARCH_PORT}:9200"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - backend
    deploy:
      resources:
        limits:
          memory: 1G
    healthcheck:
      test: curl -s http://elasticsearch:${ELASTICSEARCH_PORT} >/dev/null || exit 1
      interval: 5s
      timeout: 5s
      retries: 10

  mysql:
    image: mysql:latest
    container_name: movie-wishlist-db
    restart: always
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    ports:
      - ${MYSQL_PORT}:3306
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - backend
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 5s
      retries: 10

  app:
    container_name: movie-wishlist
    build:
      context: ../
      dockerfile: ./docker/Dockerfile
    environment:
      - PORT=${PORT}
      - NODE_ENV=${NODE_ENV}
    ports:
      - ${PORT}:${PORT}
    volumes:
      - ../:/home/node/app
      - /home/node/app/node_modules
    networks:
      - backend
    depends_on:
      mysql:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy

networks:
  backend:
    driver: bridge

volumes:
  mysql-data:
  elasticsearch-data:
